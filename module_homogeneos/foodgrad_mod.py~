#!/usr/bin/env python

from math import *
from numpy import *
from numpy.random import normal
from numpy.fft import *
import numpy.random
from numpy.random import *
from scipy import fftpack
from . import libfluid
from . randomflow_mod import *
from scipy.integrate import ode


def init_C(grid, dc = 1.):
     C = zeros((grid.N+1, grid.N+1))
     c_aux = linspace(-10, 10, grid.N+1)
     c_aux = (1./sqrt(2*pi*dc**2))*exp(-(c_aux**2)/(2*(dc**2)))
     C[:, 0] =  c_aux
     return C


def advect_back(ux, uy, grid, ug, t, dt):
     
     ux = shift_frame(ug, t, grid, ux)
     uy = shift_frame(ug, t, grid, uy)   
  
     x = grid.x_grid.copy() - ux.T*dt
     y = grid.y_grid.copy() - uy.T*dt - ug*dt
   
     return x, y

def evolve_C(grid, C, ux, uy, ug, t, dt):
     x, y = advect_back(ux, uy, grid, ug, t, dt)
     C_new = C.copy()
     
     libfluid.get_interpolation(grid.N+1, grid.N+1, x, y, 0., 0., grid.x_i, grid.y_i,
                                grid.delta, grid.delta, C, C_new)
     
     return C_new



